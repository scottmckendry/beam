package views

import (
	"fmt"
	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/icon"
	"github.com/scottmckendry/beam/ui/utils"
)

type ContactFormProps struct {
	Name        string
	Email       string
	Role        string
	Phone       string
	IsPrimary   bool
	Notes       string
	ButtonLabel string
	ActionURL   string
}

templ AddContact(customerID string) {
	@contactForm(ContactFormProps{
		Name:        "",
		Email:       "",
		Role:        "",
		Phone:       "",
		IsPrimary:   false,
		Notes:       "",
		ButtonLabel: "Add Contact",
		ActionURL:   fmt.Sprintf("@get('/sse/customer/%s/add-contact-submit', {contentType: 'form'})", customerID),
	})
}

templ EditContact(contact db.Contact) {
	@contactForm(ContactFormProps{
		Name:        contact.Name,
		Email:       contact.Email.String,
		Role:        contact.Role.String,
		Phone:       contact.Phone.String,
		IsPrimary:   contact.IsPrimary.Bool,
		Notes:       contact.Notes.String,
		ButtonLabel: "Update Contact",
		ActionURL:   fmt.Sprintf("@get('/sse/customer/%s/edit-contact-submit/%s', {contentType: 'form'})", contact.CustomerID.String(), contact.ID.String()),
	})
}

templ contactForm(p ContactFormProps) {
	<div id="customer-tab-content" class="p-6">
		<form class="form grid gap-6 w-full max-w-3xl mx-auto" data-on-submit={ p.ActionURL }>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="grid gap-2">
					<label for="name">Name</label>
					<input type="text" id="name" name="name" placeholder="Contact Name" value={ p.Name } required/>
				</div>
				<div class="grid gap-2">
					<label for="email">Email</label>
					<input type="email" id="email" name="email" placeholder="mail@example.com" value={ p.Email } required/>
				</div>
				<div class="grid gap-2">
					<label for="role">Role</label>
					<input type="text" id="role" name="role" placeholder="Role (e.g. Manager)" value={ p.Role }/>
				</div>
				<div class="grid gap-2">
					<label for="phone">Phone</label>
					<input type="tel" id="phone" name="phone" placeholder="+64 21 123 4567" value={ p.Phone }/>
				</div>
			</div>
			<div class="flex items-start gap-3 mt-2">
				<input type="checkbox" id="is_primary" name="is_primary" class="input" checked?={ p.IsPrimary }/>
				<div class="grid gap-2">
					<label for="is_primary" class="label">Primary Contact</label>
					<p class="text-muted-foreground text-sm">
						Only one primary contact is allowed per organization. Setting this will replace any existing primary contact.
					</p>
				</div>
			</div>
			<div class="grid gap-2 mt-6">
				<label for="notes">Notes</label>
				<textarea id="notes" name="notes" placeholder="Markdown supported" rows="6">{ p.Notes }</textarea>
			</div>
			<button type="submit" class="btn w-full mt-6">{ p.ButtonLabel }</button>
		</form>
	</div>
}

templ CustomerContacts(c db.GetCustomerRow, contacts []db.Contact) {
	<div id="customer-tab-content">
		<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mt-2">
			<div class="ml-1">
				<h2 class="font-bold">Contacts</h2>
				<p class="text-muted-foreground text-sm">Manage and view all contacts for this customer</p>
			</div>
			<div class="flex gap-2">
				<a class="btn flex items-center gap-2" data-on-click={ fmt.Sprintf("@get('/sse/customer/%s/add-contact')", c.ID.String()) }>
					@icon.Plus()
					Add Contact
				</a>
			</div>
		</div>
		<div class="flex flex-col gap-4 mt-4">
			for _, contact := range contacts {
				@ContactCard(contact)
			}
		</div>
	</div>
}

templ ContactCard(contact db.Contact) {
	<div class="card flex flex-col sm:flex-row sm:items-center justify-between gap-4 p-4 sm:p-6 w-full relative">
		<div class="flex items-center gap-4 min-w-0">
			<span class="relative flex h-12 w-12 shrink-0 rounded-full group">
				if contact.Avatar.Valid {
					<img class="h-12 w-12 object-cover rounded-full" alt={ contact.Name } src={ contact.Avatar.String }/>
				} else {
					<span class="flex h-full w-full items-center justify-center rounded-full bg-muted">{ utils.Initials(contact.Name) }</span>
				}
				<button
					class="btn absolute top-[-4] right-[-2] opacity-0 group-hover:opacity-100 transition-opacity rounded-full size-5 p-0"
					title="Edit Avatar"
					data-on-click={ "$avatar = '', $_showEditAvatarModal-" + contact.ID.String() + " = true" }
				>
					@icon.Pencil(icon.Props{Class: "size-[10px]"})
				</button>
			</span>
			@ModalDialog(ModalProps{ID: contact.ID.String() + "-edit-avatar-dialog", Signal: "_showEditAvatarModal-" + contact.ID.String()}) {
				<header>
					<h2 id="edit-avatar-dialog-title">Upload Avatar</h2>
					<p id="edit-avatar-dialog-description">Upload a new avatar for this contact. Recommended size is 200x200px.</p>
				</header>
				<section>
					<form class="form grid gap-4" enctype="multipart/form-data">
						<div class="grid gap-2">
							<input type="file" id="avatar-upload" name="avatar" accept="image/*" required data-bind="avatar"/>
						</div>
					</form>
				</section>
				<footer class="flex gap-1 justify-end flex-row">
					<button class="btn-outline" type="button" data-on-click={ "$_showEditAvatarModal-" + contact.ID.String() + " = false" }>Cancel</button>
					<button class="btn" type="button" data-on-click={ fmt.Sprintf("@post('/sse/customer/%s/upload-avatar/%s', $_showEditAvatarModal-%s = false)", contact.CustomerID.String(), contact.ID.String(), contact.ID.String()) }>
						@icon.Upload()
						Upload Avatar
					</button>
					<button class="btn-destructive flex items-center gap-2" type="button" data-on-click={ fmt.Sprintf("@get('/sse/customer/%s/delete-avatar/%s', $_showEditAvatarModal-%s = false)", contact.CustomerID.String(), contact.ID.String(), contact.ID.String()) }>
						@icon.Trash2()
					</button>
				</footer>
			}
			<div class="min-w-0">
				<h3 class="font-semibold">{ contact.Name }</h3>
				<p class="text-sm text-muted-foreground flex items-center gap-2">
					{ contact.Role.String }
					if contact.IsPrimary.Valid && contact.IsPrimary.Bool {
						<span class="badge-secondary leading-none">
							@icon.Contact(icon.Props{Size: 12})
							Primary
						</span>
					}
				</p>
			</div>
		</div>
		<div class="flex items-center sm:ml-auto w-full sm:w-auto">
			<div class="space-y-1 text-left sm:text-right w-full">
				<div class="flex items-center gap-1 text-sm">
					@icon.Mail(icon.Props{Size: 12, Class: "h-3 w-3 flex-shrink-0"})
					<a href={ fmt.Sprintf("mailto:%s", contact.Email.String) } class="truncate hover:text-primary focus:text-primary transition-colors">{ contact.Email.String }</a>
				</div>
				<div class="flex items-center gap-1 text-sm text-muted-foreground">
					@icon.Phone(icon.Props{Size: 12, Class: "h-3 w-3 flex-shrink-0"})
					<a href={ fmt.Sprintf("tel:%s", contact.Phone.String) } class="hover:text-primary focus:text-primary transition-colors">{ contact.Phone.String }</a>
				</div>
			</div>
		</div>
		<div class="dropdown-menu absolute sm:relative right-0 sm:right-auto top-0 sm:top-auto">
			<button
				type="button"
				id={ contact.ID.String() + "-dropdown-trigger" }
				aria-haspopup="menu"
				aria-controls={ contact.ID.String() + "-dropdown-menu" }
				aria-expanded="false"
				class="ring-offset-background focus-visible:outline-hidden focus-visible:ring-ring inline-flex items-center justify-center gap-2 transition-colors focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 w-10 rounded-md absolute right-0 top-0 sm:static ml-auto sm:ml-0"
			>
				@icon.Ellipsis(icon.Props{Size: 16, Class: "h-4 w-4"})
			</button>
			<div id={ contact.ID.String() + "-dropdown-popover" } data-popover aria-hidden="true" class="absolute right-0 top-10 left-auto">
				<div role="menu" id={ contact.ID.String() + "-dropdown-menu" } aria-labelledby={ contact.ID.String() + "-dropdown-trigger" }>
					<div role="menuitem" data-on-click={ "$_showContactViewModal-" + contact.ID.String() + " = true" }>
						@icon.Eye(icon.Props{Size: 16, Class: "inline mr-2"})
						View Contact
					</div>
					<a role="menuitem" data-on-click={ fmt.Sprintf("@get('/sse/customer/%s/edit-contact/%s')", contact.CustomerID.String(), contact.ID.String()) }>
						@icon.Pencil(icon.Props{Size: 16, Class: "inline mr-2"})
						Edit Contact
					</a>
					<div role="menuitem" data-on-click={ "$_showContactModal-" + contact.ID.String() + " = true" }>
						@icon.Trash2(icon.Props{Size: 16, Class: "inline mr-2"})
						Delete Contact
					</div>
				</div>
			</div>
		</div>
		@ModalDialog(ModalProps{
			ID:     contact.ID.String() + "-contact-modal",
			Signal: "_showContactModal-" + contact.ID.String()}) {
			<header>
				<h2 id="alert-dialog-title">Delete Contact?</h2>
				<p id="alert-dialog-description">
					This will delete <strong>{ contact.Name }</strong> and remove them from active lists.
				</p>
			</header>
			<footer>
				<button class="btn-outline" data-on-click={ "$_showContactModal-" + contact.ID.String() + " = false" }>Cancel</button>
				<button class="btn-destructive" data-on-click={ fmt.Sprintf("$_showContactModal-%s = false, @get('/sse/customer/%s/delete-contact/%s')", contact.ID.String(), contact.CustomerID.String(), contact.ID.String()) }>
					@icon.Trash2()
					Delete
				</button>
			</footer>
		}
		@ModalDialog(ModalProps{
			ID:     contact.ID.String() + "-contact-view-modal",
			Signal: "_showContactViewModal-" + contact.ID.String()}) {
			@ContactView(contact)
		}
	</div>
}

templ ContactView(contact db.Contact) {
	<button type="button" class="absolute right-4 top-4" data-on-click={ "$_showContactViewModal-" + contact.ID.String() + " = false" } aria-label="Close">
		@icon.X(icon.Props{Size: 18})
	</button>
	<div class="flex flex-col space-y-1.5 text-center sm:text-left pb-4">
		<h2 id={ contact.ID.String() + "-contact-view-modal-title" } class="text-lg font-semibold leading-none tracking-tight sr-only">Contact Details</h2>
		<div class="flex items-start gap-4">
			<span class="relative flex h-14 w-14 shrink-0 overflow-hidden rounded-full">
				if contact.Avatar.Valid {
					<img class="h-14 w-14 object-cover rounded-full" alt={ contact.Name } src={ contact.Avatar.String }/>
				} else {
					<span class="flex h-full w-full items-center justify-center rounded-full bg-muted text-lg">{ utils.Initials(contact.Name) }</span>
				}
			</span>
			<div class="flex-1 min-w-0">
				<div class="flex items-center gap-2 mb-1">
					<h2 class="text-xl font-bold text-foreground truncate">{ contact.Name }</h2>
					if contact.IsPrimary.Valid && contact.IsPrimary.Bool {
						<span class="badge-secondary leading-none">
							@icon.Contact(icon.Props{Size: 12})
							Primary
						</span>
					}
				</div>
				<div class="flex items-center gap-1 text-muted-foreground">
					@icon.Building2(icon.Props{Size: 16})
					<span class="text-sm">{ contact.Role.String }</span>
				</div>
			</div>
		</div>
	</div>
	<div class="space-y-4">
		<div class="space-y-3">
			<h3 class="text-sm font-medium text-foreground">Contact Information</h3>
			<div class="space-y-2">
				<div class="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50 transition-colors">
					@icon.Mail(icon.Props{Size: 16})
					<a href={ fmt.Sprintf("mailto:%s", contact.Email.String) } class="text-sm text-foreground hover:text-primary transition-colors flex-1 truncate">{ contact.Email.String }</a>
				</div>
				<div class="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50 transition-colors">
					@icon.Phone(icon.Props{Size: 16})
					<a href={ fmt.Sprintf("tel:%s", contact.Phone.String) } class="text-sm text-foreground hover:text-primary transition-colors flex-1">{ contact.Phone.String }</a>
				</div>
			</div>
		</div>
		<div class="space-y-2">
			<h3 class="text-md font-medium text-foreground">Notes</h3>
			@mdNotes(contact.Notes.String)
		</div>
	</div>
	<div class="flex justify-end pt-4">
		<button class="btn btn-secondary" aria-label="Edit" data-on-click={ fmt.Sprintf("@get('/sse/customer/%s/edit-contact/%s')", contact.CustomerID.String(), contact.ID.String()) }>
			@icon.Pencil(icon.Props{Size: 16})
			Edit
		</button>
	</div>
}
