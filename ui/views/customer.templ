package views

import (
	"strings"
	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/components/form"
	"github.com/scottmckendry/beam/ui/components/icon"
	"github.com/scottmckendry/beam/ui/components/input"
	"github.com/scottmckendry/beam/ui/components/selectbox"
	"github.com/scottmckendry/beam/ui/components/tabs"
	"github.com/scottmckendry/beam/ui/components/textarea"
)

var tabHeaders = []string{
	"Overview",
	"Contacts",
	"Subscriptions",
	"Projects",
}

var notesExample = `
This is an example of customer notes. You can use markdown syntax here. Such as:
- **Bold text**
- *Italic text*
- [ ] Checkboxes

---

# More features

> Blockquoutes
> With Tailwind classes applied.

## Subheadings

- [x] Task 1
- [ ] Task 2

### Links

Links to [cool projects](https://github.com/scottmckendry/beam) are also supported.

## Tables

| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Row 1    | Data 1   | Some really long data that might wrap to the next line if it's too long |
| Row 2    | Data 2   | More long text. There's a lot of text here to demonstrate how it wraps in a table cell. |
| Row 3    | Data 3   | And even more long text to see how it behaves in a table cell. |

`

templ AddCustomer() {
	<div id="inner-content" class="p-6">
		<div class="w-full max-w-4xl mx-auto">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="space-y-6">
					@form.Item() {
						@form.Label(form.LabelProps{
							For: "name-form",
						}) {
							Name
						}
						@input.Input(input.Props{
							ID:          "name-form",
							Type:        input.TypeText,
							Placeholder: "Customer Name",
							Required:    true,
						})
					}
					@form.Item() {
						@form.Label(form.LabelProps{
							For: "email-form",
						}) {
							Email
						}
						@input.Input(input.Props{
							ID:          "email-form",
							Type:        input.TypeEmail,
							Placeholder: "mail@example.com",
							Required:    true,
						})
					}
				</div>
				<div class="space-y-6">
					@form.Item() {
						@form.Label(form.LabelProps{
							For: "status-form",
						}) {
							Status
						}
						@selectbox.SelectBox() {
							@selectbox.Trigger(selectbox.TriggerProps{
								ID:       "status-form",
								Name:     "status",
								Required: true,
							}) {
								@selectbox.Value(selectbox.ValueProps{
									Placeholder: "Select a status",
								})
							}
							@selectbox.Content() {
								@selectbox.Item(selectbox.ItemProps{
									Value: "active",
								}) {
									Active
								}
								@selectbox.Item(selectbox.ItemProps{
									Value: "inactive",
								}) {
									Inactive
								}
								@selectbox.Item(selectbox.ItemProps{
									Value: "prospect",
								}) {
									Prospect
								}
							}
						}
					}
				</div>
			</div>
			<div class="mt-6">
				@form.Item() {
					@form.Label(form.LabelProps{
						For: "notes-form",
					}) {
						Notes
					}
					@textarea.Textarea(textarea.Props{
						ID:          "notes-form",
						Name:        "notes",
						Placeholder: "Notes for this customer. Markdown supported is supported.",
						Rows:        8,
					})
				}
			</div>
		</div>
	</div>
}

templ Customer(c db.GetCustomerRow) {
	<div id="inner-content" class="flex-1 p-4 md:p-6">
		@tabs.Tabs(tabs.Props{
			ID: "customer-tabs",
		}) {
			@tabs.List(tabs.ListProps{
				Class: "w-full",
			}) {
				for _, header := range tabHeaders {
					@tabs.Trigger(tabs.TriggerProps{
						Value:    strings.ToLower(header),
						IsActive: true,
					}) {
						<h3 class="text-sm font-medium">
							if header == "Subscriptions" {
								<span class="sm:hidden">Subs</span>
								<span class="hidden sm:inline">Subscriptions</span>
							} else {
								{ header }
							}
						</h3>
					}
				}
			}
			<div class="w-full mt-2">
				for i, header := range tabHeaders {
					@tabs.Content(tabs.ContentProps{
						Value:    strings.ToLower(header),
						IsActive: i == 0,
					}) {
						<div id={ "customer-" + strings.ToLower(header) } class="p-4" data-on-load={ "@get('/sse/customer/" + strings.ToLower(header) + "/" + c.ID.String() + "')" }></div>
					}
				}
			</div>
		}
	</div>
}

templ CustomerOverview(c db.GetCustomerRow) {
	<div id="customer-overview">
		<div class="grid gap-4 grid-cols-2 lg:grid-cols-4 mt-6">
			@StatsCard(StatsCardProps{
				Title: "Contacts",
				Icon:  icon.Users(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ContactCount }</div>
				<p class="text-xs text-muted-foreground">+1 this month</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Subscriptions",
				Icon:  icon.CreditCard(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">${ c.SubscriptionRevenue }/month</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Projects",
				Icon:  icon.FolderGit2(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">GitHub repos</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Revenue",
				Icon:  icon.DollarSign(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">${ c.MonthlyRevenue }</div>
				if c.RevenueChange > 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingUp(icon.Props{Size: 12, Class: "inline mr-1", Color: "#22c555"})
						+{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange < 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingDown(icon.Props{Size: 12, Class: "inline mr-1", Color: "#ef4444"})
						-{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange == 0 {
					<p class="text-xs text-muted-foreground">
						No change
					</p>
				}
			}
		</div>
		<div class="mt-6">
			@MdNotes(notesExample)
		</div>
	</div>
}
