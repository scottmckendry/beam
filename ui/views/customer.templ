package views

import (
	"strings"
	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/components/form"
	"github.com/scottmckendry/beam/ui/components/icon"
	"github.com/scottmckendry/beam/ui/components/input"
	"github.com/scottmckendry/beam/ui/components/selectbox"
	"github.com/scottmckendry/beam/ui/components/tabs"
	"github.com/scottmckendry/beam/ui/components/textarea"
	"github.com/scottmckendry/beam/ui/components/button"
)

var tabHeaders = []string{
	"Overview",
	"Contacts",
	"Subscriptions",
	"Projects",
}

templ AddCustomer() {
	<div id="inner-content" class="p-6">
		<div class="w-full max-w-3xl mx-auto">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div>
					@form.Label(form.LabelProps{
						For: "name",
					}) {
						Name
					}
					@input.Input(input.Props{
						ID:          "name",
						Type:        input.TypeText,
						Placeholder: "Customer Name",
						Required:    true,
						Attributes: templ.Attributes{
							"data-bind": "customer.name",
						},
					})
				</div>
				<div>
					@form.Label(form.LabelProps{
						For: "email",
					}) {
						Email
					}
					@input.Input(input.Props{
						ID:          "email",
						Type:        input.TypeEmail,
						Placeholder: "mail@example.com",
						Required:    true,
						Attributes: templ.Attributes{
							"data-bind": "customer.email",
						},
					})
				</div>
				<div>
					@form.Label(form.LabelProps{
						For: "status",
					}) {
						Status
					}
					@selectbox.SelectBox(selectbox.Props{
						Attributes: templ.Attributes{
							"data-bind": "customer.status",
						},
					}) {
						@selectbox.Trigger(selectbox.TriggerProps{
							ID:       "status",
							Name:     "status",
							Required: true,
						}) {
							@selectbox.Value(selectbox.ValueProps{
								Placeholder: "Select a status",
							})
						}
						@selectbox.Content(selectbox.ContentProps{NoSearch: true}) {
							@selectbox.Item(selectbox.ItemProps{
								Value: "active",
							}) {
								Active
							}
							@selectbox.Item(selectbox.ItemProps{
								Value: "inactive",
							}) {
								Inactive
							}
							@selectbox.Item(selectbox.ItemProps{
								Value: "prospect",
							}) {
								Prospect
							}
						}
					}
				</div>
			</div>
			<div class="mt-6">
				@form.Label(form.LabelProps{
					For: "notes",
				}) {
					Notes
				}
				@textarea.Textarea(textarea.Props{
					ID:          "notes",
					Name:        "notes",
					Placeholder: "Markdown supported",
					Rows:        8,
					Attributes: templ.Attributes{
						"data-bind": "customer.notes",
					},
				})
			</div>
			<div class="mt-6">
				@button.Button(button.Props{
					Class: "w-full",
					Attributes: templ.Attributes{
						"data-on-click": "@get('/sse/customers/add-submit')",
					},
				}) {
					Add Customer
				}
			</div>
		</div>
	</div>
}

templ Customer(c db.GetCustomerRow) {
	<div id="inner-content" class="flex-1 p-4 md:p-6">
		@tabs.Tabs(tabs.Props{
			ID: "customer-tabs",
		}) {
			@tabs.List(tabs.ListProps{
				Class: "w-full",
			}) {
				for _, header := range tabHeaders {
					@tabs.Trigger(tabs.TriggerProps{
						Value:    strings.ToLower(header),
						IsActive: true,
					}) {
						<h3 class="text-sm font-medium">
							if header == "Subscriptions" {
								<span class="sm:hidden">Subs</span>
								<span class="hidden sm:inline">Subscriptions</span>
							} else {
								{ header }
							}
						</h3>
					}
				}
			}
			<div class="w-full mt-2">
				for i, header := range tabHeaders {
					@tabs.Content(tabs.ContentProps{
						Value:    strings.ToLower(header),
						IsActive: i == 0,
					}) {
						// TODO: make this dynamic based on the header
						@CustomerOverview(c)
					}
				}
			</div>
		}
	</div>
}

templ CustomerOverview(c db.GetCustomerRow) {
	<div id="customer-overview">
		<div class="grid gap-4 grid-cols-2 lg:grid-cols-4 mt-6">
			@StatsCard(StatsCardProps{
				Title: "Contacts",
				Icon:  icon.Users(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ContactCount }</div>
				<p class="text-xs text-muted-foreground">+1 this month</p>
			}
			@StatsCard(StatsCardProps{
				Title:      "Subscriptions",
				ShortTitle: "Subs",
				Icon:       icon.CreditCard(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">${ c.SubscriptionRevenue }/month</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Projects",
				Icon:  icon.FolderGit2(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">GitHub repos</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Revenue",
				Icon:  icon.DollarSign(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">${ c.MonthlyRevenue }</div>
				if c.RevenueChange > 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingUp(icon.Props{Size: 12, Class: "inline mr-1", Color: "#22c555"})
						+{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange < 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingDown(icon.Props{Size: 12, Class: "inline mr-1", Color: "#ef4444"})
						-{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange == 0 {
					<p class="text-xs text-muted-foreground">
						No change
					</p>
				}
			}
		</div>
		<div class="mt-6">
			@mdNotes(c.Notes.String)
		</div>
	</div>
}
