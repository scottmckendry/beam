package views

import (
	"fmt"
	"strings"

	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/components/avatar"
	"github.com/scottmckendry/beam/ui/components/badge"
	"github.com/scottmckendry/beam/ui/components/button"
	"github.com/scottmckendry/beam/ui/components/card"
	"github.com/scottmckendry/beam/ui/components/icon"
)

var tabHeaders = []string{
	"Overview",
	"Contacts",
	"Subscriptions",
	"Projects",
}

type CustomerFormProps struct {
	Name        string
	Email       string
	Status      string
	Address     string
	Phone       string
	Website     string
	Notes       string
	ButtonLabel string
	ActionURL   string
}

templ AddCustomer() {
	@customerForm(CustomerFormProps{
		Name:        "",
		Email:       "",
		Status:      "active",
		Address:     "",
		Phone:       "",
		Website:     "",
		Notes:       "",
		ButtonLabel: "Add Customer",
		ActionURL:   "@get('/sse/customer/add-submit', {contentType: 'form'})",
	})
}

templ EditCustomer(c db.GetCustomerRow) {
	@customerForm(CustomerFormProps{
		Name:        c.Name,
		Email:       c.Email.String,
		Status:      c.Status,
		Address:     c.Address.String,
		Phone:       c.Phone.String,
		Website:     c.Website.String,
		Notes:       c.Notes.String,
		ButtonLabel: "Update Customer",
		ActionURL:   fmt.Sprintf("@get('/sse/customer/edit-submit/%s', {contentType: 'form'})", c.ID.String()),
	})
}

templ Customer(c db.GetCustomerRow) {
	<div id="inner-content" class="flex-1 p-4 md:p-6">
		<div class="tabs w-full" id="customer-tabs">
			<nav role="tablist" aria-orientation="horizontal" class="w-full">
				for i, header := range tabHeaders {
					<button
						type="button"
						role="tab"
						id={ fmt.Sprintf("customer-tabs-tab-%d", i+1) }
						aria-controls={ fmt.Sprintf("customer-tabs-panel-%d", i+1) }
						aria-selected={ i == 0 }
						tabindex="0"
						data-on-click={ fmt.Sprintf("@get('/sse/customer/%s/%s')", strings.ToLower(header), c.ID.String()) }
					>
						{ header }
					</button>
				}
			</nav>
			for i := range tabHeaders {
				<div
					role="tabpanel"
					id={ fmt.Sprintf("customer-tabs-panel-%d", i+1) }
					aria-labelledby={ fmt.Sprintf("customer-tabs-tab-%d", i+1) }
					tabindex="-1"
					aria-selected={ i == 0 }
				>
					if i == 0 {
						@CustomerOverview(c)
					}
				</div>
			}
		</div>
	</div>
}

templ CustomerOverview(c db.GetCustomerRow) {
	<div id="customer-tab-content">
		<div class="flex flex-wrap items-center gap-3 mt-6">
			@button.Button(button.Props{}) {
				@icon.Plus()
				Add Contact
			}
			@button.Button(button.Props{
				Variant: button.VariantSecondary,
				Class:   "hidden sm:flex",
			}) {
				@icon.FileText()
				Create Invoice
			}
			<div id="actions-dropdown" class="dropdown-menu">
				<button type="button" id="actions-dropdown-trigger" aria-haspopup="menu" aria-controls="actions-dropdown-menu" aria-expanded="false" class="btn-outline flex items-center gap-2">
					@icon.Ellipsis(icon.Props{Size: 16})
					<span>More Actions</span>
				</button>
				<div id="actions-dropdown-popover" data-popover aria-hidden="true" class="min-w-48 right-0">
					<div role="menu" id="actions-dropdown-menu" aria-labelledby="actions-dropdown-menu-trigger">
						<div role="group" aria-labelledby="customer-actions">
							<div role="menuitem" class="block sm:hidden" data-on-click={ fmt.Sprintf("@get('/sse/customer/invoice/%s')", c.ID.String()) }>
								<span class="flex items-center">
									@icon.FileText(icon.Props{Size: 16, Class: "mr-2"})
									Create Invoice
								</span>
							</div>
							<div role="menuitem" data-on-click={ fmt.Sprintf("@get('/sse/customer/edit/%s')", c.ID.String()) }>
								<span class="flex items-center">
									@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
									Edit Customer
								</span>
							</div>
							<div role="menuitem" class="text-destructive">
								<button type="button" onclick="document.getElementById('delete-modal').showModal()" class="flex items-center w-full">
									@icon.Trash2(icon.Props{Size: 16, Class: "mr-2"})
									Delete Customer
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
			<dialog id="delete-modal" class="dialog max-w-md mx-4" aria-labelledby="delete-modal-title" aria-describedby="delete-modal-description">
				<article>
					<header>
						<h2 id="delete-modal-title">Are you sure?</h2>
						<p id="delete-modal-description">This action cannot be undone. This will permanently delete <strong>{ c.Name }</strong> and remove all associated data from our servers.</p>
					</header>
					<footer class="flex gap-2 justify-end">
						<button class="btn-outline" type="button" onclick="document.getElementById('delete-modal').close()">Cancel</button>
						<button class="btn-primary btn-destructive flex items-center gap-2" type="button" data-on-click={ fmt.Sprintf("@get('/sse/customer/delete/%s')", c.ID.String()) }>
							@icon.Trash2()
							Delete
						</button>
					</footer>
				</article>
			</dialog>
		</div>
		<div class="grid gap-4 grid-cols-2 lg:grid-cols-4 mt-6">
			@StatsCard(StatsCardProps{
				Title: "Contacts",
				Icon:  icon.Users(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ContactCount }</div>
				<p class="text-xs text-muted-foreground">+1 this month</p>
			}
			@StatsCard(StatsCardProps{
				Title:      "Subscriptions",
				ShortTitle: "Subs",
				Icon:       icon.CreditCard(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">${ c.SubscriptionRevenue }/month</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Projects",
				Icon:  icon.FolderGit2(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">GitHub repos</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Revenue",
				Icon:  icon.DollarSign(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				// TODO: use tailwind colours for revenue change
				<div class="text-2xl font-bold">${ c.MonthlyRevenue }</div>
				if c.RevenueChange > 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingUp(icon.Props{Size: 12, Class: "inline mr-1", Color: "#22c555"})
						+{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange < 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingDown(icon.Props{Size: 12, Class: "inline mr-1", Color: "#ef4444"})
						-{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange == 0 {
					<p class="text-xs text-muted-foreground">
						No change
					</p>
				}
			}
		</div>
		<div class="grid gap-4 md:grid-cols-2 mt-4">
			@card.Card(card.Props{Class: ""}) {
				@card.Header() {
					@card.Title() {
						Customer Information
					}
					@card.Description() {
						Basic details and contact information
					}
				}
				@card.Content(card.ContentProps{Class: "space-y-4 pt-3"}) {
					<div class="flex items-center gap-4">
						<div class="relative group">
							@avatar.Avatar(avatar.Props{Size: avatar.SizeLg}) {
								if c.Logo.String != "" {
									@avatar.Image(avatar.ImageProps{Src: c.Logo.String})
								} else {
									{ avatar.Initials(c.Name) }
								}
							}
							<button
								class="btn absolute top-[-4] right-[-2] opacity-0 group-hover:opacity-100 transition-opacity rounded-full size-6"
								title="Edit Logo"
								data-on-click="$logo = '', document.getElementById('edit-logo-dialog').showModal()"
							>
								@icon.Pencil(icon.Props{Class: "size-[12px]"})
							</button>
						</div>
						<div>
							<h3 class="text-xl font-semibold">{ c.Name }</h3>
							@badge.Badge(badge.Props{Variant: badge.VariantSecondary, Class: "leading-none mt-1"}) {
								switch c.Status {
									case "active":
										@icon.Check()
									case "inactive":
										@icon.X()
									case "prospect":
										@icon.Plus()
									default:
										@icon.Info()
								}
								{ c.Status }
							}
						</div>
					</div>
					<div class="space-y-3">
						<div class="flex items-center gap-2 text-sm">
							@icon.Mail(icon.Props{Size: 16, Class: "text-muted-foreground"})
							<span>{ c.Email.String }</span>
						</div>
						<div class="flex items-center gap-2 text-sm">
							@icon.Phone(icon.Props{Size: 16, Class: "text-muted-foreground"})
							<span>{ c.Phone.String }</span>
						</div>
						<div class="flex items-center gap-2 text-sm">
							@icon.Building2(icon.Props{Size: 16, Class: "text-muted-foreground"})
							<span>{ c.Address.String }</span>
						</div>
						<div class="flex items-center gap-2 text-sm">
							@icon.ExternalLink(icon.Props{Size: 16, Class: "text-muted-foreground"})
							<a href={ c.Website.String } target="_blank" rel="noopener noreferrer" class="text-muted-foreground hover:text-primary underline">
								{ strings.TrimPrefix(c.Website.String, "https://") }
							</a>
						</div>
					</div>
				}
			}
			@card.Card() {
				@card.Header() {
					@card.Title() {
						Account Summary
					}
					@card.Description() {
						Key account metrics and status
					}
				}
				// TODO: replace hardcoded values with actual data
				@card.Content(card.ContentProps{Class: "space-y-4 pt-4"}) {
					<hr/>
					<div class="flex justify-between items-center">
						<span class="text-sm font-medium">Customer Since</span>
						<span class="text-sm text-muted-foreground">January 15, 2023</span>
					</div>
					<div class="flex justify-between items-center">
						<span class="text-sm font-medium">Outstanding Balance</span>
						<span class="text-sm text-destructive">$750</span>
					</div>
					<div class="flex justify-between items-center">
						<span class="text-sm font-medium">Last Activity</span>
						<span class="text-sm text-muted-foreground">2 hours ago</span>
					</div>
					<div class="flex justify-between items-center">
						<span class="text-sm font-medium">Invoices</span>
						<span class="text-sm text-muted-foreground">2 Unpaid, 1 Draft</span>
					</div>
					<div class="flex justify-between items-center">
						<span class="text-sm font-medium">Projects</span>
						<span class="text-sm text-muted-foreground">4 Active, 2 Maintenance</span>
					</div>
				}
			}
		</div>
		<div class="mt-4">
			@mdNotes(c.Notes.String)
		</div>
		<dialog id="edit-logo-dialog" class="dialog" aria-labelledby="edit-logo-dialog-title" aria-describedby="edit-logo-dialog-description" onclick="this.close()">
			<article onclick="event.stopPropagation()">
				<header>
					<h2 id="edit-logo-dialog-title">Upload Logo</h2>
					<p id="edit-logo-dialog-description">Upload a new logo for this customer. Recommended size is 200x200px.</p>
				</header>
				<section>
					<form class="form grid gap-4" enctype="multipart/form-data">
						<div class="grid gap-2">
							<input type="file" id="logo-upload" name="logo" accept="image/*" required data-bind="logo"/>
						</div>
					</form>
				</section>
				<footer class="flex gap-1 justify-end flex-row">
					<button class="btn-outline" type="button" onclick="this.closest('dialog').close()">Cancel</button>
					<button class="btn" type="button" data-on-click={ fmt.Sprintf("@post('/sse/customer/upload-logo/%s')", c.ID.String()) } data-attr-disabled="!$logo.length">
						@icon.Upload()
						Upload Logo
					</button>
					<button class="btn-destructive flex items-center gap-2" type="button" data-on-click={ fmt.Sprintf("@get('/sse/customer/delete-logo/%s')", c.ID.String()) }>
						@icon.Trash2()
					</button>
				</footer>
			</article>
		</dialog>
	</div>
}

templ customerForm(p CustomerFormProps) {
	<div id="inner-content" class="p-6">
		<form class="form grid gap-6 w-full max-w-3xl mx-auto" data-on-submit={ p.ActionURL }>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="grid gap-2">
					<label for="name">Name</label>
					<input type="text" id="name" name="name" placeholder="Customer Name" value={ p.Name } required/>
				</div>
				<div class="grid gap-2">
					<label for="email">Email</label>
					<input type="email" id="email" name="email" placeholder="mail@example.com" value={ p.Email } required/>
				</div>
				<div class="grid gap-2">
					<label for="address">Address</label>
					<input type="text" id="address" name="address" placeholder="123 Main St, City, Country" value={ p.Address }/>
				</div>
				<div class="grid gap-2">
					<label for="phone">Phone</label>
					<input type="tel" id="phone" name="phone" placeholder="+64 21 123 4567" value={ p.Phone }/>
				</div>
				<div class="grid gap-2">
					<label for="website">Website</label>
					<input type="url" id="website" name="website" placeholder="https://example.com" value={ p.Website }/>
				</div>
				<div class="grid gap-2">
					<label for="status">Status</label>
					<select id="status" name="status" class="w-full">
						<option value="active" selected={ p.Status == "active" }>Active</option>
						<option value="inactive" selected={ p.Status == "inactive" }>Inactive</option>
						<option value="prospect" selected={ p.Status == "prospect" }>Prospect</option>
					</select>
				</div>
			</div>
			<div class="grid gap-2 mt-6">
				<label for="notes">Notes</label>
				<textarea id="notes" name="notes" placeholder="Markdown supported" rows="8">{ p.Notes }</textarea>
			</div>
			<button type="submit" class="btn w-full mt-6">{ p.ButtonLabel }</button>
		</form>
	</div>
}
