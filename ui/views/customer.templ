package views

import (
	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/components/button"
	"github.com/scottmckendry/beam/ui/components/dropdown"
	"github.com/scottmckendry/beam/ui/components/form"
	"github.com/scottmckendry/beam/ui/components/icon"
	"github.com/scottmckendry/beam/ui/components/input"
	"github.com/scottmckendry/beam/ui/components/modal"
	"github.com/scottmckendry/beam/ui/components/selectbox"
	"github.com/scottmckendry/beam/ui/components/tabs"
	"github.com/scottmckendry/beam/ui/components/textarea"
	"strings"
)

var tabHeaders = []string{
	"Overview",
	"Contacts",
	"Subscriptions",
	"Projects",
}

type CustomerFormProps struct {
	Name        string
	Email       string
	Status      string
	Notes       string
	ButtonLabel string
	ActionURL   string
}

templ AddCustomer() {
	@customerForm(CustomerFormProps{
		Name:        "",
		Email:       "",
		Status:      "active",
		Notes:       "",
		ButtonLabel: "Add Customer",
		ActionURL:   "@get('/sse/customer/add-submit', {contentType: 'form'})",
	})
}

templ EditCustomer(c db.GetCustomerRow) {
	@customerForm(CustomerFormProps{
		Name:        c.Name,
		Email:       c.Email.String,
		Status:      c.Status,
		Notes:       c.Notes.String,
		ButtonLabel: "Update Customer",
		ActionURL:   "@get('/sse/customer/edit-submit/" + c.ID.String() + "', {contentType: 'form'})",
	})
}

templ Customer(c db.GetCustomerRow) {
	<div id="inner-content" class="flex-1 p-4 md:p-6">
		@tabs.Tabs(tabs.Props{
			ID: "customer-tabs",
		}) {
			@tabs.List(tabs.ListProps{
				Class: "w-full",
			}) {
				for _, header := range tabHeaders {
					@tabs.Trigger(tabs.TriggerProps{
						Value:    strings.ToLower(header),
						IsActive: true,
					}) {
						<h3 class="text-sm font-medium">
							if header == "Subscriptions" {
								<span class="sm:hidden">Subs</span>
								<span class="hidden sm:inline">Subscriptions</span>
							} else {
								{ header }
							}
						</h3>
					}
				}
			}
			<div class="w-full mt-2">
				for i, header := range tabHeaders {
					@tabs.Content(tabs.ContentProps{
						Value:    strings.ToLower(header),
						IsActive: i == 0,
					}) {
						if i == 0 {
							@customerOverview(c)
						}
					}
				}
			</div>
		}
	</div>
}

templ customerOverview(c db.GetCustomerRow) {
	<div id="customer-overview">
		<div class="flex items-center gap-4 mt-6">
			@button.Button(button.Props{
				Class: "btn btn-primary",
			}) {
				@icon.Plus(icon.Props{Size: 16})
				Add Contact
			}
			@dropdown.Dropdown() {
				@dropdown.Trigger() {
					@button.Button(button.Props{
						Variant: button.VariantOutline,
					}) {
						@icon.Ellipsis(icon.Props{Size: 16})
						<span>More Actions</span>
					}
				}
				@dropdown.Content(dropdown.ContentProps{
					Width: "w-48",
					Align: "right",
				}) {
					@dropdown.Item() {
						<span class="flex items-center" data-on-click={ "@get('/sse/customer/edit/" + c.ID.String() + "')" }>
							@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
							Edit Customer
						</span>
					}
					@dropdown.Separator()
					@dropdown.Item(dropdown.ItemProps{
						Class: "text-destructive",
					}) {
						@modal.Trigger(modal.TriggerProps{
							For: "delete-customer-modal",
						}) {
							<span class="flex items-center">
								@icon.Trash2(icon.Props{Size: 16, Class: "mr-2"})
								Delete Customer
							</span>
						}
					}
				}
			}
			// TODO: genericise this modal so it can be reused for the myriad
			// of other delete actions in the app
			@modal.Modal(modal.Props{
				ID:    "delete-customer-modal",
				Class: "max-w-md mx-4",
			}) {
				@modal.Header() {
					Are you sure?
				}
				@modal.Body() {
					<p class="text-sm text-muted-foreground">
						Are you sure you want to delete <strong>{ c.Name }</strong>? This action cannot be undone.
					</p>
					<p class="text-xs text-destructive mt-2">
						All associated data will be permanently removed.
					</p>
				}
				@modal.Footer() {
					<div class="flex gap-2">
						@modal.Close(modal.CloseProps{
							For: "delete-customer-modal",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantSecondary,
							}) {
								Cancel
							}
						}
						@modal.Close(modal.CloseProps{
							For: "delete-customer-modal",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantDestructive,
								Attributes: templ.Attributes{
									"data-on-click": "@get('/sse/customer/delete/" + c.ID.String() + "')",
								},
							}) {
								@icon.Trash2(icon.Props{Size: 16})
								Delete
							}
						}
					</div>
				}
			}
		</div>
		<div class="grid gap-4 grid-cols-2 lg:grid-cols-4 mt-6">
			@StatsCard(StatsCardProps{
				Title: "Contacts",
				Icon:  icon.Users(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ContactCount }</div>
				<p class="text-xs text-muted-foreground">+1 this month</p>
			}
			@StatsCard(StatsCardProps{
				Title:      "Subscriptions",
				ShortTitle: "Subs",
				Icon:       icon.CreditCard(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">${ c.SubscriptionRevenue }/month</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Projects",
				Icon:  icon.FolderGit2(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">{ c.ProjectCount }</div>
				<p class="text-xs text-muted-foreground">GitHub repos</p>
			}
			@StatsCard(StatsCardProps{
				Title: "Revenue",
				Icon:  icon.DollarSign(icon.Props{Size: 20, Class: "text-muted-foreground"}),
			}) {
				<div class="text-2xl font-bold">${ c.MonthlyRevenue }</div>
				if c.RevenueChange > 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingUp(icon.Props{Size: 12, Class: "inline mr-1", Color: "#22c555"})
						+{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange < 0 {
					<p class="text-xs text-muted-foreground">
						@icon.TrendingDown(icon.Props{Size: 12, Class: "inline mr-1", Color: "#ef4444"})
						-{ c.RevenueChange }%
					</p>
				}
				if c.RevenueChange == 0 {
					<p class="text-xs text-muted-foreground">
						No change
					</p>
				}
			}
		</div>
		<div class="mt-6">
			@mdNotes(c.Notes.String)
		</div>
	</div>
}

templ customerForm(p CustomerFormProps) {
	<div id="inner-content" class="p-6">
		<form class="w-full max-w-3xl mx-auto">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				@form.Item() {
					@form.Label(form.LabelProps{
						For: "name",
					}) {
						Name
					}
					@input.Input(input.Props{
						ID:          "name",
						Name:        "name",
						Type:        input.TypeText,
						Value:       p.Name,
						Placeholder: "Customer Name",
						Required:    true,
					})
				}
				@form.Item() {
					@form.Label(form.LabelProps{
						For: "email",
					}) {
						Email
					}
					@input.Input(input.Props{
						ID:          "email",
						Name:        "email",
						Type:        input.TypeEmail,
						Value:       p.Email,
						Placeholder: "mail@example.com",
						Required:    true,
					})
				}
				@form.Item() {
					@form.Label(form.LabelProps{
						For: "status",
					}) {
						Status
					}
					@selectbox.SelectBox() {
						@selectbox.Trigger(selectbox.TriggerProps{
							ID:   "status",
							Name: "status",
						}) {
							@selectbox.Value(selectbox.ValueProps{
								Placeholder: "Select a status",
							})
						}
						@selectbox.Content(selectbox.ContentProps{NoSearch: true}) {
							@selectbox.Item(selectbox.ItemProps{
								Value:    "active",
								Selected: p.Status == "active",
							}) {
								Active
							}
							@selectbox.Item(selectbox.ItemProps{
								Value:    "inactive",
								Selected: p.Status == "inactive",
							}) {
								Inactive
							}
							@selectbox.Item(selectbox.ItemProps{
								Value:    "prospect",
								Selected: p.Status == "prospect",
							}) {
								Prospect
							}
						}
					}
				}
			</div>
			@form.Item(form.ItemProps{Class: "mt-6"}) {
				@form.Label(form.LabelProps{
					For: "notes",
				}) {
					Notes
				}
				@textarea.Textarea(textarea.Props{
					ID:          "notes",
					Name:        "notes",
					Placeholder: "Markdown supported",
					Rows:        8,
					Value:       p.Notes,
				})
			}
			@button.Button(button.Props{
				Class: "w-full mt-6",
				Attributes: templ.Attributes{
					"data-on-click": p.ActionURL,
				},
			}) {
				{ p.ButtonLabel }
			}
		</form>
	</div>
}
