package views

import (
	"fmt"
	"strings"

	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/icon"
)

templ HeaderIcon(name string) {
	<div id="header-icon">
		switch name {
			case "dashboard":
				@icon.LayoutDashboard(icon.Props{Size: 18})
			case "invoices":
				@icon.FileText(icon.Props{Size: 18})
			case "customer":
				@icon.Building2(icon.Props{Size: 18})
		}
	</div>
}

// Main navigation component
templ Navigation(currentPage, headerTitle, headerDescription string, customers []db.Customer, user db.User) {
	<aside
		id="sidebar"
		class="sidebar"
		data-side="left"
		aria-hidden="false"
	>
		<nav aria-label="Sidebar navigation" class="flex flex-col h-full">
			<header>
				<div class="flex items-center gap-3 h-16 px-4">
					@icon.Rss(icon.Props{Size: 24})
					<h1 class="text-xl font-bold">beam</h1>
				</div>
			</header>
			<div class="relative flex-1 flex flex-col min-h-0">
				<section class="flex-1 overflow-y-auto px-2 scrollbar" aria-label="Sidebar navigation">
					@navigationContent(currentPage, customers)
					// allow a small ammount of space for overscroll to prevent the last item from being cut off
					<div class="h-10"></div>
				</section>
				// subtle fade out effect for the footer (makes it more ovbiously scrollable when content is long)
				<div class="pointer-events-none absolute left-0 right-0 bottom-16 h-16 z-10 bg-gradient-to-b from-transparent to-[color:var(--background)]" aria-hidden="true"></div>
				@navigationFooter(user)
			</div>
		</nav>
	</aside>
	<div class="flex flex-col min-h-screen" data-signals={ "{_headerTitle: '" + headerTitle + "', _headerDescription: '" + headerDescription + "', _currentPage: '" + currentPage + "'}" }>
		<header class="h-16 border-b pl-4 pr-2 shrink-0 sticky top-0 bg-background z-30">
			// Mobile navigation button
			<div class="h-full flex items-center">
				<div class="md:hidden">
					<button type="button" class="-ml-2 pr-2 flex items-center" data-on-click="document.dispatchEvent(new CustomEvent('basecoat:sidebar'));">
						@icon.PanelLeftOpen(icon.Props{Class: "size-[24px]"})
					</button>
				</div>
				<div class="flex-1 flex items-center justify-between">
					<div>
						<div class="flex items-center gap-2">
							@HeaderIcon(currentPage)
							<h2 class="text-xl font-bold" data-text="$_headerTitle"></h2>
						</div>
						<p class="text-sm text-gray-500 whitespace-nowrap" data-text="$_headerDescription"></p>
					</div>
					// TODO: Implement search
					<div class="flex items-center gap-2">
						<div class="relative hidden sm:block">
							<span class="absolute left-2 top-1/2 -translate-y-1/2 text-muted-foreground">
								@icon.Search(icon.Props{Size: 16})
							</span>
							<input class="w-48 lg:w-64 pl-8 pr-2 py-2 text-sm rounded-md border bg-background" placeholder="Search..."/>
						</div>
						@themeSwitcher()
					</div>
				</div>
			</div>
		</header>
		<div id="inner-content">
			{ children... }
		</div>
	</div>
}

// Main navigation section components
templ navigationContent(currentPage string, customers []db.Customer) {
	<section class="flex-1 overflow-y-auto px-2 scrollbar" aria-label="Sidebar navigation">
		<div role="group" aria-labelledby="nav-group-main" class="mb-4">
			<span role="heading" id="nav-group-main" class="px-4 text-xs font-semibold text-gray-500 mb-2 block">Navigation</span>
			<div class="space-y-1">
				@navItem("Dashboard", "/sse/dashboard", icon.LayoutDashboard(icon.Props{Size: 18}))
				@navItem("Invoices", "/sse/invoice", icon.FileText(icon.Props{Size: 18}))
			</div>
		</div>
		<div role="group" aria-labelledby="nav-group-customers" class="mb-4">
			<span role="heading" id="nav-group-customers" class="px-4 text-xs font-semibold text-gray-500 my-2 block">Customers</span>
			<div id="customer-nav-section">
				for _, c := range customers {
					@customerNavItem(c)
				}
			</div>
			<div class="mt-2 px-2">
				@addCustomerButton()
			</div>
		</div>
	</section>
}

templ navigationFooter(user db.User) {
	<footer class="p-2">
		<div id="user-popover" class="popover relative w-full">
			<button id="user-popover-trigger" type="button" aria-expanded="false" aria-controls="user-popover-panel" class="btn-ghost p-2 h-12 w-full flex items-center justify-start" data-keep-mobile-sidebar-open="">
				<img src={ fmt.Sprintf("https://github.com/%s.png", user.GithubID) } class="rounded-lg shrink-0 size-8"/>
				<div class="grid flex-1 text-left text-sm leading-tight ml-1">
					<span class="truncate font-medium">{ user.Name }</span>
					<span class="truncate text-xs text-muted-foreground">{ fmt.Sprintf("@%s", user.GithubID) }</span>
				</div>
				@icon.ChevronsUpDown(icon.Props{Size: 16, Class: "ml-auto text-muted-foreground"})
			</button>
			<div id="user-popover-panel" data-popover aria-hidden="true" data-side="top" class="absolute left-0 bottom-14 w-[271px] md:w-[239px] z-50 bg-background border rounded-lg shadow-lg p-4">
				<div class="grid gap-4">
					<header class="grid gap-1.5">
						<h2 class="font-semibold">Account</h2>
						<p class="text-xs text-muted-foreground pb-1">
							@icon.Mail(icon.Props{Size: 14, Class: "inline-block mr-2"})
							{ user.Email }
						</p>
					</header>
					<footer class="grid gap-2">
						<a href="/settings" class="btn-sm" tabindex="0">Settings</a>
						<a href="/logout" class="btn-sm-outline" tabindex="0">Logout</a>
					</footer>
				</div>
			</div>
		</div>
	</footer>
}

// Customer-related components
templ CustomerNavigation(customers []db.Customer) {
	<div id="customer-nav-section" class="space-y-1">
		for _, c := range customers {
			@customerNavItem(c)
		}
	</div>
}

// TODO: data-drawer-close breaks after the navigation is refreshed. (on mobile)
// Can be replicated either by adding a new customer or editing an existing one.
templ customerNavItem(c db.Customer) {
	<a
		href={ "#" + c.ID.String() }
		data-attr-class={ "$_currentPage == '" + c.ID.String() + "' ? 'flex items-center gap-2 px-2 py-1 mx-2 mb-2 rounded-md font-medium text-sm bg-accent text-accent-foreground' : 'flex items-center gap-2 py-1 px-2 mx-2 mb-2 rounded-md font-medium text-sm hover:bg-accent hover:text-accent-foreground'" }
		data-on-click={ "@get('/sse/customer/" + c.ID.String() + "')" }
	>
		if c.Logo.String != "" {
			<img class="size-8 shrink-0 object-cover rounded-full" alt={ c.Name } src={ c.Logo.String }/>
		} else {
			<span class="size-8 shrink-0 bg-muted text-foreground flex items-center justify-center rounded-full">{ Initials(c.Name) }</span>
		}
		{ c.Name }
	</a>
}

// Helper components
templ navItem(text string, uri string, icon templ.Component) {
	<a
		href={ "#" + strings.ToLower(text) }
		data-attr-class={ "$_currentPage == '" + strings.ToLower(text) + "' ? 'flex items-center gap-2 px-4 py-2 mx-2 rounded font-medium text-sm bg-accent text-accent-foreground' : 'flex items-center gap-2 px-4 py-2 mx-2 rounded font-medium text-sm hover:bg-accent hover:text-accent-foreground'" }
		data-on-click={ "@get('" + uri + "')" }
	>
		@icon
		{ text }
	</a>
}

templ addCustomerButton() {
	<button type="button" class="btn btn-secondary w-full" data-on-click="@get('/sse/customer/add')">
		@icon.Plus(icon.Props{Size: 16})
		Add Customer
	</button>
}

templ themeSwitcher() {
	<button
		type="button"
		aria-label="Toggle dark mode"
		data-side="bottom"
		onclick="document.dispatchEvent(new CustomEvent('basecoat:theme'))"
		class="btn-icon-outline size-9"
	>
		<span class="hidden dark:block">
			@icon.Sun(icon.Props{Size: 16, Class: "text-muted-foreground"})
		</span>
		<span class="block dark:hidden">
			@icon.Moon(icon.Props{Size: 16, Class: "text-muted-foreground"})
		</span>
	</button>
}
