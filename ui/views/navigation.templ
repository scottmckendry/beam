package views

import (
	"github.com/scottmckendry/beam/ui/components/button"
	"github.com/scottmckendry/beam/ui/components/icon"
	"github.com/scottmckendry/beam/ui/components/avatar"
	"github.com/scottmckendry/beam/ui/components/drawer"
	"strings"
)

type NavItemData struct {
	Icon templ.Component
	Text string
	Href string
}

var navigationItems = []NavItemData{
	{Icon: icon.LayoutDashboard(icon.Props{Size: 16}), Text: "Dashboard", Href: "/dashboard"},
	{Icon: icon.FileText(icon.Props{Size: 16}), Text: "Invoices", Href: "/invoices"},
}

templ NavItem(icon templ.Component, text string, href string, active bool) {
	<li>
		<a
			href={ href }
			class={ "flex items-center gap-2 px-4 py-2 mx-2 rounded font-medium text-sm",
			templ.KV("bg-accent text-accent-foreground", active),
			templ.KV("hover:bg-accent hover:text-accent-foreground", !active) }
		>
			@icon
			<span>{ text }</span>
		</a>
	</li>
}

templ CustomerNavItem(name, href string, active bool) {
	<li>
		<a
			href={ href }
			class={ "flex items-center gap-2 px-4 py-2 mx-2 rounded-md font-medium text-sm",
			templ.KV("bg-accent text-accent-foreground", active),
			templ.KV("hover:bg-accent hover:text-accent-foreground", !active) }
		>
			@avatar.Avatar(avatar.Props{Size: avatar.SizeSm}) {
				@avatar.Image(avatar.ImageProps{Src: "broken-image.webp"})
				@avatar.Fallback() {
					{ avatar.Initials(name) }
				}
			}
			<span>{ name }</span>
		</a>
	</li>
}

templ NavigationContent(currentPage string) {
	<div class="flex-1 overflow-y-auto px-2">
		<div class="mt-2">
			<p class="px-4 text-xs font-semibold text-gray-500 mb-2">Navigation</p>
			<ul class="space-y-1">
				for _, item := range navigationItems {
					@NavItem(item.Icon, item.Text, item.Href, currentPage == strings.ToLower(item.Text))
				}
			</ul>
		</div>
		<div class="mt-6">
			<p class="px-4 text-xs font-semibold text-gray-500 mb-2">Customers</p>
			<ul class="space-y-1">
				@avatar.Script()
				@CustomerNavItem("Acme Corporation", "/customer/1", currentPage == "customer-1")
				@CustomerNavItem("Tech Solutions Inc", "/customer/2", currentPage == "customer-2")
				@CustomerNavItem("Startup Co", "/customer/3", currentPage == "customer-3")
			</ul>
			<div class="px-4 py-2">
				@button.Button(button.Props{
					Variant: button.VariantOutline,
					Class:   "w-full bg-transparent",
				}) {
					@icon.Plus(icon.Props{Size: 16, Class: "mr-2"})
					Add Customer
				}
			</div>
		</div>
	</div>
}

templ NavigationFooter() {
	<div class="p-2">
		<a href="/logout" class="flex items-center p-2 hover:bg-accent rounded-md justify-center">
			@icon.LogOut(icon.Props{Size: 20})
		</a>
	</div>
}

templ Navigation(currentPage, headerTitle, headerDesc string) {
	<div class="flex h-screen">
		// Desktop navigation
		<aside class="w-64 border-r flex flex-col hidden md:flex">
			<div class="flex items-center gap-3 h-16 px-4">
				@icon.Rss(icon.Props{Size: 24})
				<h1 class="text-xl font-bold">beam</h1>
			</div>
			@NavigationContent(currentPage)
			@NavigationFooter()
		</aside>
		<div class="flex flex-col flex-1">
			<header class="h-16 border-b px-4 shrink-0">
				// Mobile navigation trigger
				<div class="h-full flex items-center">
					<div class="md:hidden">
						@drawer.Script()
						@drawer.Trigger(drawer.TriggerProps{
							For: "mobile-nav",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Class:   "-ml-2 pr-2",
							}) {
								@icon.PanelLeftOpen(icon.Props{Size: 24})
							}
						}
					</div>
					<div class="flex-1 flex items-center justify-between">
						<div>
							<h2 class="text-xl font-bold">{ headerTitle }</h2>
							<p class="text-sm text-gray-500 ">{ headerDesc }</p>
						</div>
						<div class="relative hidden sm:block">
							<span class="absolute left-2 top-1/2 -translate-y-1/2 text-muted-foreground">
								@icon.Search(icon.Props{Size: 16})
							</span>
							<input class="w-48 lg:w-64 pl-8 pr-2 py-2 text-sm rounded-md border bg-background" placeholder="Search..."/>
						</div>
						@button.Button(button.Props{
							Variant: button.VariantSecondary,
							Class:   "hidden",
						}) {
							@icon.Plus(icon.Props{Size: 16, Class: "mr-2"})
							Add New
						}
						@button.Button(button.Props{
							Variant: button.VariantSecondary,
							Size:    button.SizeIcon,
							Class:   "sm:hidden",
						}) {
							@icon.Plus(icon.Props{Size: 16})
						}
					</div>
				</div>
			</header>
			// Mobile navigation drawer
			@drawer.Content(drawer.ContentProps{
				Position: drawer.PositionLeft,
				ID:       "mobile-nav",
			}) {
				<div class="flex flex-col h-full">
					<div class="shrink-0 flex items-center justify-between h-16 px-4 ">
						<div class="flex items-center gap-3">
							@icon.Rss(icon.Props{Size: 24})
							<h1 class="text-xl font-bold">beam</h1>
						</div>
						@drawer.Trigger(drawer.TriggerProps{
							For: "mobile-nav",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
							}) {
								@icon.PanelLeftClose(icon.Props{Size: 24})
							}
						}
					</div>
					<div class="flex-1 min-h-0">
						@NavigationContent(currentPage)
					</div>
					<div class="mt-auto">
						@NavigationFooter()
					</div>
				</div>
			}
			<div class="flex-1 p-4 md:p-6">
				{ children... }
			</div>
		</div>
	</div>
}
