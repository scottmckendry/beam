package views

import (
	"strings"

	"github.com/scottmckendry/beam/db/sqlc"
	"github.com/scottmckendry/beam/ui/components/avatar"
	"github.com/scottmckendry/beam/ui/components/button"
	"github.com/scottmckendry/beam/ui/components/drawer"
	"github.com/scottmckendry/beam/ui/components/icon"
)

templ HeaderIcon(name string) {
	<div id="header-icon">
		switch name {
			case "dashboard":
				@icon.LayoutDashboard(icon.Props{Size: 18})
			case "invoices":
				@icon.FileText(icon.Props{Size: 18})
			case "customer":
				@icon.Building2(icon.Props{Size: 18})
		}
	</div>
}

// Main navigation component
templ Navigation(currentPage, headerTitle, headerDescription string, customers []db.Customer) {
	<div class="flex h-screen" data-signals={ "{_headerTitle: '" + headerTitle + "', _headerDescription: '" + headerDescription + "', _currentPage: '" + currentPage + "'}" }>
		// Desktop navigation
		<aside class="w-64 border-r flex flex-col hidden md:flex">
			<div class="flex items-center gap-3 h-16 px-4">
				@icon.Rss(icon.Props{Size: 24})
				<h1 class="text-xl font-bold">beam</h1>
			</div>
			@navigationContent(currentPage, customers)
			@navigationFooter()
		</aside>
		<div class="flex flex-col flex-1">
			<header class="h-16 border-b pl-4 pr-2 shrink-0 sticky top-0 bg-background z-30">
				// Mobile navigation trigger
				<div class="h-full flex items-center">
					<div class="md:hidden">
						@drawer.Trigger(drawer.TriggerProps{
							For: "mobile-nav",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Class:   "-ml-2 pr-2",
							}) {
								@icon.PanelLeftOpen(icon.Props{Class: "size-[24px]"})
							}
						}
					</div>
					<div class="flex-1 flex items-center justify-between">
						<div>
							<div class="flex items-center gap-2">
								@HeaderIcon(currentPage)
								<h2 class="text-xl font-bold" data-text="$_headerTitle"></h2>
							</div>
							<p class="text-sm text-gray-500 whitespace-nowrap" data-text="$_headerDescription"></p>
						</div>
						// TODO: Implement search
						<div class="flex items-center gap-2">
							<div class="relative hidden sm:block">
								<span class="absolute left-2 top-1/2 -translate-y-1/2 text-muted-foreground">
									@icon.Search(icon.Props{Size: 16})
								</span>
								<input class="w-48 lg:w-64 pl-8 pr-2 py-2 text-sm rounded-md border bg-background" placeholder="Search..."/>
							</div>
							@themeSwitcher()
						</div>
					</div>
				</div>
			</header>
			// Mobile navigation drawer
			@drawer.Content(drawer.ContentProps{
				Position: drawer.PositionLeft,
				ID:       "mobile-nav",
			}) {
				<div class="flex flex-col h-full">
					<div class="shrink-0 flex items-center justify-between h-16 px-4 ">
						<div class="flex items-center gap-3">
							@icon.Rss(icon.Props{Size: 24})
							<h1 class="text-xl font-bold">beam</h1>
						</div>
						@button.Button(button.Props{
							Variant: button.VariantGhost,
							Attributes: templ.Attributes{
								"data-drawer-close": "mobile-nav",
							},
						}) {
							@icon.PanelLeftClose(icon.Props{Class: "size-[24px]"})
						}
					</div>
					<div class="flex-1 min-h-0">
						@navigationContent(currentPage, customers)
					</div>
					<div class="mt-auto">
						@navigationFooter()
					</div>
				</div>
			}
			<div id="inner-content">
				{ children... }
			</div>
		</div>
	</div>
}

// Main navigation section components
templ navigationContent(currentPage string, customers []db.Customer) {
	<div class="flex-1 overflow-y-auto px-2">
		<div class="mt-2">
			<p class="px-4 text-xs font-semibold text-gray-500 mb-2">Navigation</p>
			<div class="space-y-1">
				@navItem("Dashboard", "/sse/dashboard", icon.LayoutDashboard(icon.Props{Size: 18}))
				@navItem("Invoices", "/sse/invoice", icon.FileText(icon.Props{Size: 18}))
			</div>
		</div>
		<div class="mt-6">
			<p class="px-4 text-xs font-semibold text-gray-500 mb-2">Customers</p>
			<div id="customer-nav-section">
				for _, c := range customers {
					@customerNavItem(c)
				}
			</div>
			<div class="mt-2 px-2">
				@addCustomerButton()
			</div>
		</div>
	</div>
}

templ navigationFooter() {
	<div class="p-2">
		<a href="/logout" class="flex items-center p-2 hover:bg-accent rounded-md justify-center">
			@icon.LogOut(icon.Props{Size: 20, Class: "rotate-180"})
		</a>
	</div>
}

// Customer-related components
templ CustomerNavigation(customers []db.Customer) {
	<div id="customer-nav-section" class="space-y-1">
		for _, c := range customers {
			@customerNavItem(c)
		}
	</div>
}

// TODO: data-drawer-close breaks after the navigation is refreshed. (on mobile)
// Can be replicated either by adding a new customer or editing an existing one.
templ customerNavItem(c db.Customer) {
	<a
		data-attr-class={ "$_currentPage == '" + c.ID.String() + "' ? 'flex items-center gap-2 px-2 py-1 mx-2 mb-2 rounded-md font-medium text-sm bg-accent text-accent-foreground' : 'flex items-center gap-2 py-1 px-2 mx-2 mb-2 rounded-md font-medium text-sm hover:bg-accent hover:text-accent-foreground'" }
		data-on-click={ "@get('/sse/customer/" + c.ID.String() + "')" }
		data-drawer-close="mobile-nav"
	>
		@avatar.Avatar(avatar.Props{Size: avatar.SizeSm}) {
			if c.Logo.String != "" {
				@avatar.Image(avatar.ImageProps{Src: c.Logo.String})
			} else {
				{ avatar.Initials(c.Name) }
			}
		}
		<span>{ c.Name }</span>
	</a>
}

// Helper components
templ navItem(text string, uri string, icon templ.Component) {
	<a
		data-attr-class={ "$_currentPage == '" + strings.ToLower(text) + "' ? 'flex items-center gap-2 px-4 py-2 mx-2 rounded font-medium text-sm bg-accent text-accent-foreground' : 'flex items-center gap-2 px-4 py-2 mx-2 rounded font-medium text-sm hover:bg-accent hover:text-accent-foreground'" }
		data-on-click={ "@get('" + uri + "')" }
		data-drawer-close="mobile-nav"
	>
		@icon
		{ text }
	</a>
}

templ addCustomerButton() {
	@button.Button(button.Props{
		Variant: button.VariantOutline,
		Class:   "w-full bg-transparent",
		Attributes: templ.Attributes{
			"data-on-click":     "@get('/sse/customer/add')",
			"data-drawer-close": "mobile-nav",
		},
	}) {
		@icon.Plus(icon.Props{Size: 16, Class: "mr-2"})
		Add Customer
	}
}

templ themeSwitcher() {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Class:   "text-muted-foreground",
		Attributes: templ.Attributes{
			"id":   "theme-toggle-btn",
			"type": "button",
		},
	}) {
		<span id="theme-icon-sun" style="display:none;">
			@icon.Sun(icon.Props{Class: "size-[22px]"})
		</span>
		<span id="theme-icon-moon" style="display:none;">
			@icon.Moon(icon.Props{Class: "size-[22px]"})
		</span>
	}
}
