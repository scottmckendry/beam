// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const listSubscriptionsByCustomer = `-- name: ListSubscriptionsByCustomer :many
SELECT s.id, s.customer_id, s.description, s.amount, s.term, s.billing_cadence, s.start_date, s.end_date, s.status, s.created_at, s.updated_at, s.deleted_at, s.start_date as next_billing_date FROM subscriptions s WHERE customer_id = ? AND deleted_at IS NULL ORDER BY created_at DESC
`

type ListSubscriptionsByCustomerRow struct {
	ID              uuid.UUID
	CustomerID      uuid.UUID
	Description     string
	Amount          float64
	Term            string
	BillingCadence  string
	StartDate       time.Time
	EndDate         sql.NullTime
	Status          string
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	DeletedAt       sql.NullTime
	NextBillingDate time.Time
}

func (q *Queries) ListSubscriptionsByCustomer(ctx context.Context, customerID uuid.UUID) ([]ListSubscriptionsByCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSubscriptionsByCustomerRow
	for rows.Next() {
		var i ListSubscriptionsByCustomerRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Description,
			&i.Amount,
			&i.Term,
			&i.BillingCadence,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.NextBillingDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
