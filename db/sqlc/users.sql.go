// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const getUserByGithubID = `-- name: GetUserByGithubID :one
SELECT id, email, github_id, is_admin FROM users WHERE github_id = ? LIMIT 1
`

func (q *Queries) GetUserByGithubID(ctx context.Context, githubID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGithubID, githubID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.GithubID,
		&i.IsAdmin,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (email, github_id, is_admin) VALUES (?, ?, 0)
ON CONFLICT(github_id) DO NOTHING
`

type InsertUserParams struct {
	Email    string
	GithubID string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Email, arg.GithubID)
	return err
}

const isUserAdmin = `-- name: IsUserAdmin :one
SELECT is_admin FROM users WHERE github_id = ? LIMIT 1
`

func (q *Queries) IsUserAdmin(ctx context.Context, githubID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserAdmin, githubID)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}
