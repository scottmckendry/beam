// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (customer_id, name, role, email, phone, avatar, is_primary, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, customer_id, name, role, email, phone, avatar, is_primary, notes, created_at, updated_at
`

type CreateContactParams struct {
	CustomerID uuid.UUID
	Name       string
	Role       sql.NullString
	Email      sql.NullString
	Phone      sql.NullString
	Avatar     sql.NullString
	IsPrimary  sql.NullBool
	Notes      sql.NullString
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.CustomerID,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.Phone,
		arg.Avatar,
		arg.IsPrimary,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Phone,
		&i.Avatar,
		&i.IsPrimary,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContactsByCustomer = `-- name: ListContactsByCustomer :many
SELECT id, customer_id, name, role, email, phone, avatar, is_primary, notes, created_at, updated_at FROM contacts WHERE customer_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListContactsByCustomer(ctx context.Context, customerID uuid.UUID) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContactsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Name,
			&i.Role,
			&i.Email,
			&i.Phone,
			&i.Avatar,
			&i.IsPrimary,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
