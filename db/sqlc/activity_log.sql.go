// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_log.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const listRecentActivity = `-- name: ListRecentActivity :many
SELECT id, customer_id, activity_type, "action", description, created_at FROM activity_log ORDER BY created_at DESC LIMIT 50
`

func (q *Queries) ListRecentActivity(ctx context.Context) ([]ActivityLog, error) {
	rows, err := q.db.QueryContext(ctx, listRecentActivity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActivityLog
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.ActivityType,
			&i.Action,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logActivity = `-- name: LogActivity :one
INSERT INTO activity_log (customer_id, activity_type, action, description)
VALUES (?, ?, ?, ?)
RETURNING id, customer_id, activity_type, "action", description, created_at
`

type LogActivityParams struct {
	CustomerID   uuid.UUID
	ActivityType string
	Action       string
	Description  string
}

func (q *Queries) LogActivity(ctx context.Context, arg LogActivityParams) (ActivityLog, error) {
	row := q.db.QueryRowContext(ctx, logActivity,
		arg.CustomerID,
		arg.ActivityType,
		arg.Action,
		arg.Description,
	)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ActivityType,
		&i.Action,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
