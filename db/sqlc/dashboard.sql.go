// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboard.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getDashboardStats = `-- name: GetDashboardStats :one
SELECT
    (SELECT COUNT(*) FROM customers WHERE deleted_at IS NULL) AS total_customers,
    (SELECT COUNT(*) FROM customers WHERE status = 'active' AND deleted_at IS NULL) AS active_customers,
    (SELECT COUNT(*) FROM contacts WHERE deleted_at IS NULL) AS total_contacts,
    7 AS total_projects, -- hardcoded
    1247 AS monthly_revenue, -- hardcoded
    15 AS revenue_change, -- hardcoded
    3 AS active_subscriptions, -- hardcoded
    12 AS total_invoices, -- hardcoded
    2 AS pending_invoices, -- hardcoded
    1 AS overdue_invoices, -- hardcoded
    348 AS total_invoice_amount, -- hardcoded
    9 AS paid_invoices
`

type GetDashboardStatsRow struct {
	TotalCustomers      int64
	ActiveCustomers     int64
	TotalContacts       int64
	TotalProjects       int64
	MonthlyRevenue      int64
	RevenueChange       int64
	ActiveSubscriptions int64
	TotalInvoices       int64
	PendingInvoices     int64
	OverdueInvoices     int64
	TotalInvoiceAmount  int64
	PaidInvoices        int64
}

func (q *Queries) GetDashboardStats(ctx context.Context) (GetDashboardStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getDashboardStats)
	var i GetDashboardStatsRow
	err := row.Scan(
		&i.TotalCustomers,
		&i.ActiveCustomers,
		&i.TotalContacts,
		&i.TotalProjects,
		&i.MonthlyRevenue,
		&i.RevenueChange,
		&i.ActiveSubscriptions,
		&i.TotalInvoices,
		&i.PendingInvoices,
		&i.OverdueInvoices,
		&i.TotalInvoiceAmount,
		&i.PaidInvoices,
	)
	return i, err
}

const getRecentActivity = `-- name: GetRecentActivity :many
;

SELECT
    al.id,
    al.customer_id,
    al.activity_type,
    al.action,
    al.description,
    al.created_at,
    c.name AS customer_name
FROM
    activity_log al
JOIN
    customers c ON al.customer_id = c.id
WHERE c.deleted_at IS NULL
ORDER BY
    al.created_at DESC
LIMIT 10
`

type GetRecentActivityRow struct {
	ID           uuid.UUID
	CustomerID   uuid.UUID
	ActivityType string
	Action       string
	Description  string
	CreatedAt    sql.NullTime
	CustomerName string
}

// hardcoded
func (q *Queries) GetRecentActivity(ctx context.Context) ([]GetRecentActivityRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentActivity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentActivityRow
	for rows.Next() {
		var i GetRecentActivityRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.ActivityType,
			&i.Action,
			&i.Description,
			&i.CreatedAt,
			&i.CustomerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
